digraph g {
graph [ rankdir = "TD" ];
node [ fontsize="16", shape = "ellipse" ];
edge [ ];
"fundamentals" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" colspan="2">Rust fundamentals</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Easy to contribute to the compiler</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Language semantics well understood</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Extending language possible by mere humans</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Compiler library-ification</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Core Rust semantics documented</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Proof of soundness</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Unsafe code guidelines</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"core-lang" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" colspan="2">Core language improvements</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Easy to contribute to the compiler</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Dynamic dispatch (dyn trait) more powerful, easier to use</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Specialization</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Implied bounds</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Generic associated types (GATs)</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Impl trait</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Threaded contexts, capabilities</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"async-lang" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" colspan="2">Async I/O in Rust</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Using Async I/O comparable in complexity to Sync I/O</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Can author and use async libraries without thinking about runtimes</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Access to a wide variety of useful libraries on crates.io</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Easy to create and experiment with a specialized runtime</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Full support for io-uring and other high performance primitives</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Can use async fn everywhere</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Async resource cleanup works well (async drop)</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Easy interoperability between runtimes</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">I/O Uring support in tokio, other runtimes</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"onboarding-time" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" colspan="2">Smooth onboarding of Rust engineers</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Time to be highly productive is measured in months</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Well understood transition paths from major languages</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Can use async fn everywhere</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Java transition path</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">C++ transition path</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Dynamic language transition path</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"dev-tooling" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" colspan="2">Developer tooling</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Able to fix correctness problems in development environment</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Able to fix performance problems in development environment</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Quality Rust debugger</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Rust well integrated into common IDEs</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Async runtime observability (e.g., tokio console)</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Profilers for CPU and memory usage</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"prod-tooling" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" colspan="2">Production tooling</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Able to troubleshoot correctness problems that arise in production</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Able to troubleshoot performance problems that arise in production</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk"></td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"building-internet-services" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" colspan="2">Rust a common choice for building internet platforms</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2"></td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"well-integrated-into-internet-services" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" colspan="2">Rust is well integrated into internet services</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">SDKs for interacting with web services are readily available and complete</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">FaaS platforms have first-class, convenient support for Rust</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"using-internet-services" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" colspan="2">Rust a common choice for code that runs on internet platforms</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2"></td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"reduced-operating-costs" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" colspan="2">Operating costs and carbon impact are reduced</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2"></td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"high-assurance" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" colspan="2">High assurance Rust</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Developers extending Rust with unsafe Rust can prove these extensions correct</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Developers can prove their Rust code meets functional specifications</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2">Developers can prove their Rust code meets specification</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Sanitizer / dynamic checker for unsafe code</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Model checker for Rust code</td></tr>
    <tr><td bgcolor="cornsilk"></td><td bgcolor="cornsilk">Packages on crates.io checked</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"reduced-vulnerabilities" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" colspan="2">Reduced rate of vulnerabilities and high priority errors</td></tr>
    <tr><td bgcolor="darkgoldenrod1" colspan="2"></td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"fundamentals" -> "core-lang";
"core-lang" -> "async-lang";
"dev-tooling" -> "onboarding-time";
"async-lang" -> "onboarding-time";
"fundamentals" -> "dev-tooling";
"dev-tooling" -> "prod-tooling";
"onboarding-time" -> "building-internet-services";
"onboarding-time" -> "well-integrated-into-internet-services";
"onboarding-time" -> "using-internet-services";
"well-integrated-into-internet-services" -> "using-internet-services";
"using-internet-services" -> "reduced-operating-costs";
"building-internet-services" -> "reduced-operating-costs";
"fundamentals" -> "high-assurance";
"high-assurance" -> "reduced-vulnerabilities";
"building-internet-services" -> "reduced-vulnerabilities";
}
