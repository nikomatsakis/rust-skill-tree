[graphviz]
rankdir = "TD"

[doc]
columns = ["status"]

[doc.emoji.status]
"not-started" = "â–¯â–¯â–¯â–¯â–¯"
"exploration" = "â–®â–¯â–¯â–¯â–¯"
"design" = "â–®â–®â–¯â–¯â–¯"
"implementation" = "â–®â–®â–®â–¯â–¯"
"stabilization" = "â–®â–®â–®â–®â–¯"
"done" = "â–®â–®â–®â–®â–®"
"?" = "(not sure!)"

[doc.defaults]
status = "not-started"

[[group]]
name = "fundamentals"
label = "Rust fundamentals"
description = [
  "Easy to contribute to the compiler",
  "Language semantics well understood",
  "Extending language possible by mere humans"
]
items = [
  { label = "Compiler libraries for MIR, types, traits", status = "implementation" },
  { label = "Core Rust semantics documented", status = "exploration" },
  { label = "Proof of soundness", status = "exploration" },
  { label = "Unsafe code guidelines", status = "design" },
  { label = "Known soundness bugs closed", status = "design" },
]

[[group]]
name = "extensible"
label = "Extensible Rust"
description = [
  "Rust language ",
  "Language semantics well understood",
  "Extending language possible by mere humans"
]
requires = [
  "fundamentals",
]
items = [
  { label = "Macro hygiene", status = "design" },
  { label = "Libraries supply custom lints, errors", status = "not-started" },
  { label = "", status = "exploration" },
  { label = "Macros, lints have access to type information", status = "exploration" },
]

[[group]]
name = "core-lang"
label = "Core language improvements"
description = [
  "Rust language scales smoothly without 'complexity cliffs'",
]
requires = [
  "fundamentals",
]
items = [
  { label = "Dynamic dispatch (dyn trait) more powerful, easier to use", status = "design" },
  { label = "Specialization", status = "design" },
  { label = "Implied bounds", status = "design" },
  { label = "Generic associated types (GATs)", status = "implementation" },
  { label = "Impl trait", status = "stabilization" },
  { label = "Threaded contexts, capabilities", status = "exploration" },
  { label = "Generators", status = "exploration" },
  { label = "Improved borrow checker", status = "exploration", href = "https://github.com/rust-lang/polonius/" },
  { label = "View types", status = "exploration", href = "https://smallcultfollowing.com/babysteps//blog/2021/11/05/view-types/" },
]

[[group]]
name = "async-lang"
label = "Async I/O Fundamentals"
description = [
  "Using Async I/O comparable in complexity to Sync I/O",
  "Access to a wide variety of useful libraries on crates.io",
  "Easy access to high performance networking",
]
requires = [
  "core-lang"
]
items = [
  { label = "Can use async fn everywhere", status = "implementation" },
  { label = "Async resource cleanup works well (async drop)", status = "design" },
  { label = "Easy interoperability between runtimes", status = "exploration" },
  { label = "Async generators", status = "exploration" },
]

[[group]]
name = "async-stack"
label = "Async stack"
description = [
  "Can quickly stand up an async application",
  "Devs able to focus on 'business logic'",
]
requires = [
  "async-lang",
  "extensible",
]
items = [
  { label = "High-performance runtime(s)", status = "implementation" },
  { label = "Logging", status = "implementation" },
  { label = "Testing", status = "exploration" },
  { label = "Persistence / database", status = "design" },
  { label = "Middleware", status = "design" },
  { label = "I/O uring support in tokio, other runtimes", status = "implementation" },
]

[[group]]
name = "onboarding-time"
label = "Smooth onboarding of Rust engineers"
requires = [
  "dev-tooling",
  "async-stack",
]
description = [
  "Time to be highly productive is measured in months",
  "Clear transition paths from other major languages",
]
items = [
  { label = "Rust beginner learning materials", status = "done" },
  { label = "Rust intermediate learning materials", status = "implementation" },
  { label = "Java transition path", status = "not-started" },
  { label = "C++ transition path", status = "design" },
  { label = "Dynamic language transition path", status = "design" },
]

[[group]]
name = "dev-tooling"
label = "Developer tooling"
requires = [
  "extensible",
]
description = [
  "Able to understand programs in terms of async behavior",
  "Able to fix correctness problems in development environment",
  "Able to fix performance problems in development environment",
]
items = [
  { label = "Quality Rust debugger", status = "design" },
  { label = "Rust well integrated into common IDEs", status = "stabilization" },
  { label = "Async runtime observability (e.g., tokio console)", status = "implementation" },
  { label = "Profilers for CPU and memory usage", status = "design" },
]

[[group]]
name = "prod-tooling"
label = "Production tooling"
requires = [
  "dev-tooling",
]
description = [
  "Able to troubleshoot correctness problems that arise in production",
  "Able to troubleshoot performance problems that arise in production",
]
items = [
  { label = "Async runtime observability", status = "?" },
  { label = "Readable stacktraces, esp. in async", status = "design" },
  { label = "Live, low-overhead profilers for CPU and memory usage", status = "not-started" },
]

[[group]]
name = "high-assurance"
label = "High assurance Rust"
requires = [
  "extensible",
]
description = [
  "Developers extending Rust with unsafe Rust can prove these extensions correct",
  "Developers can prove their Rust code meets functional specifications",
  "Developers can prove their Rust code meets specification",
]
items = [
  { label = "Sanitizer / dynamic checker for unsafe code", status = "exploration" },
  { label = "Model checker for Rust code", status = "exploration" },
  { label = "Rust standard library proven sound" },
  { label = "Packages on crates.io checked", status = "exploration" }
]

[[group]]
name = "well-integrated-into-internet-services"
label = "Rust is well integrated into internet services"
requires = [
  "onboarding-time",
]
description = [
  "SDKs for interacting with web services are readily available and complete",
  "FaaS platforms have first-class, convenient support for Rust",
]
items = [
  { label = "First-class support in AWS", status = "design" },
  { label = "First-class support in Azure", status = "?" },
  { label = "First-class support in GCP", status = "?" },
]

[[group]]
name = "goal-internet-services"
label = "ðŸŽ¯ Rust a common choice for internet services"
requires = [
  "onboarding-time",
  "well-integrated-into-internet-services",
  "prod-tooling",
  "high-assurance",
]
description = [
  "Operating costs and carbon impact are reduced",
  "Rate of vulnerabilities and high priority errors is reduced"
]
items = [
  { label = "Rust a common choice for building internet services", status = "design" },
  { label = "Rust a common choice for code that runs on internet services", status = "not-started" },
]

[[group]]
name = "goal-embedded"
label = "ðŸŽ¯ Rust a common choice for embedded applications"
requires = [
  "onboarding-time",
  "high-assurance",
]
description = [
  "?",
]
items = [
]
